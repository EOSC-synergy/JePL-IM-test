config:
  node_agent: 'docker_compose'
  deploy_template: '.sqa/docker-compose.yml'
  credentials:
      - id: orviz-github-basic
        username_var: GIT_USER
        password_var: GIT_PASSWORD
      #- id: incd_openstack
      #  variable: OPENSTACK_URL
      - id: incd_openstack_id
        username_var: OPENSTACK_USER
        password_var: OPENSTACK_PASS
      - id: upv_im_id
        username_var: IM_USER
        password_var: IM_PASS

sqa_criteria:
  SvcQC.Dep:
    repos:
      im:
        container: imclient
        commands:
          - |
            #!/bin/bash
            # InfrastructureManager auth and OpenStack site using standard user, password, tenant format
            printf "$(cat ${IM_AUTH_FILE})\n" "${IM_USER}" "${IM_PASS}" incd "https://${OPENSTACK_URL}:${OPENSTACK_ID_PORT}" "${OPENSTACK_USER}" "${OPENSTACK_PASS}" eosc-synergy default 3.x_password > ${IM_AUTH_FILE}
            echo "Generated auth.dat file:"
            ls -l ${IM_AUTH_FILE}
            # Check auth.dat file content:
            echo "InfrastructureManager and Openstack auth"
            cat ${IM_AUTH_FILE}
            printf "$(cat /im/test.radl)" "${OPENSTACK_URL}" "${RADL_IMAGE_ID}" > /im/test-ost.radl
            echo "Printing radl file"
            cat /im/test-ost.radl
            echo 
            im_client.py -r "${IM_SERVER}" -a "${IM_AUTH_FILE}" create_wait_outputs /im/test-ost.radl > ./im_radl.json
            RETURN_CODE=$?
            echo "im_client.py create_wait_outputs return code: ${RETURN_CODE}"
            echo "Infrastructure Manager output:"
            cat ./im_radl.json
            awk "/\{/,/\}/ { print $1 }" ./im_radl.json > ./im_radl_aux.json
            echo "Infrastructure Manager output (only json part):"
            cat ./im_radl_aux.json
            echo 
            INFID=$(jq -r '[ .infid ] | .[]' ./im_radl_aux.json)
            echo "INFID=${INFID}"
            if [ ${RETURN_CODE} -eq 0 ] && ! [[ -z "${INFID}" && "x${INFID}x" == "xnullx" ]]; then
              echo "Deployment finished with success. Logs:"
              im_client.py -r "${IM_SERVER}" -a "${IM_AUTH_FILE}" getcontmsg ${INFID}
              echo 
              im_client.py -r "${IM_SERVER}" -a "${IM_AUTH_FILE}" destroy ${INFID}
              echo "im_client.py destroy return code: $?"
            elif ! [[ -z "${INFID}" && "x${INFID}x" == "xnullx" ]]; then
              echo "Deployment failed. Logs:"
              im_client.py -r "${IM_SERVER}" -a "${IM_AUTH_FILE}" getcontmsg ${INFID}
              echo 
              im_client.py -r "${IM_SERVER}" -a "${IM_AUTH_FILE}" destroy ${INFID}
              echo "im_client.py destroy return code: $?"
              exit ${RETURN_CODE}
            else
              exit ${RETURN_CODE}
            fi
          - |
            #!/bin/bash
            printf "$(cat ${IM_AUTH_FILE})" "${IM_USER}" "${IM_PASS}" incd "https://${OPENSTACK_URL}:${OPENSTACK_ID_PORT}" "${OPENSTACK_USER}" "${OPENSTACK_PASS}" eosc-synergy default > ${IM_AUTH_FILE}
            echo "Generated auth.dat file:"
            ls -l ${IM_AUTH_FILE}
            printf "$(cat /im/tosca_create.yml)" "${OPENSTACK_URL}" "${TOSCA_IMAGE_ID}" > /im/tosca_create_with_image.yml
            echo "Printing TOSCA file"
            cat /im/tosca_create_with_image.yml
            echo 
            im_client.py -r "${IM_SERVER}" -a "${IM_AUTH_FILE}" create_wait_outputs /im/tosca_create_with_image.yml > ./im_tosca.json
            RETURN_CODE=$?
            echo "im_client.py create_wait_outputs return code: ${RETURN_CODE}"
            echo "Infrastructure Manager output:"
            cat ./im_tosca.json
            echo 
            awk "/\{/,/\}/ { print $1 }" ./im_tosca.json > ./im_tosca_aux.json
            echo "Infrastructure Manager output (only json part):"
            cat ./im_tosca_aux.json
            echo 
            INFID=$(jq -r '[ .infid ] | .[]' ./im_tosca_aux.json)
            echo "INFID=${INFID}"
            if [ ${RETURN_CODE} -eq 0 ] && ! [[ -z "${INFID}" && "x${INFID}x" == "xnullx" ]]; then
              echo "Deployment finished with success. Logs:"
              im_client.py -r "${IM_SERVER}" -a "${IM_AUTH_FILE}" getcontmsg ${INFID}
              echo 
              im_client.py -r "${IM_SERVER}" -a "${IM_AUTH_FILE}" destroy ${INFID}
              echo "im_client.py destroy return code: $?"
            elif ! [[ -z "${INFID}" && "x${INFID}x" == "xnullx" ]]; then
              echo "Deployment failed. Logs:"
              im_client.py -r "${IM_SERVER}" -a "${IM_AUTH_FILE}" getcontmsg ${INFID}
              echo 
              im_client.py -r "${IM_SERVER}" -a "${IM_AUTH_FILE}" destroy ${INFID}
              echo "im_client.py destroy return code: $?"
              exit ${RETURN_CODE}
            else 
              exit ${RETURN_CODE}
            fi

environment:
  RADL_IMAGE_ID: "5336f60b-d4cc-4285-a573-1b706cbbe40b"
  TOSCA_IMAGE_ID: "97624935-200f-4670-9ea8-c65282adbe56"
  IM_SERVER: "https://appsgrycap.i3m.upv.es:31443/im/"
  OPENSTACK_ID_PORT: "5000"
  IM_AUTH_FILE: '/im/auth/auth.dat'
  OPENSTACK_URL: "stratus.ncg.ingrid.pt"
  #JPL_DOCKERPUSH: "imclient"
  #JPL_IGNOREFAILURES: "defined"
  #JPL_DOCKERFORCEBUILD: "enabled"
  #JPL_WORKSPACEDEBUG: "true"
  #JPL_WORKSPACEDEBUGTIMEOUT: "45"
  #JPL_DEBUG: "true"

# Timeout after no activity in logs for this configuration (not the absolute duration)
timeout: 1800
