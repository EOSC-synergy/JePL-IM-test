config:
  node_agent: 'docker_compose'
  deploy_template: '.sqa/docker-compose.yml'
  credentials:
      - id: orviz-github-basic
        username_var: GIT_USER
        password_var: GIT_PASSWORD
      - id: incd_openstack
        variable: OPENSTACK_URL
      - id: incd-auth.dat
        type: file
        variable: JENKINS_AUTH_FILE

sqa_criteria:
  SvcQC.Dep:
    repos:
      im:
        container: imclient
        commands:
#          - |
#            #!/bin/bash
#            echo "Check auth.dat file:"
#            ls -al "${IM_AUTH_FILE}"
#            printf "$(cat /im/test.radl)" "${OPENSTACK_URL}" "${RADL_IMAGE_ID}" > /im/test-ost.radl
#            echo "Printing radl file"
#            cat /im/test-ost.radl
#            echo 
#            im_client.py -r "${IM_SERVER}" -a "${IM_AUTH_FILE}" create_wait_outputs /im/test-ost.radl > ./im_radl.json
#            RETURN_CODE=$?
#            echo "im_client.py create_wait_outputs return code: ${RETURN_CODE}"
#            echo "Infrastructure Manager output:"
#            cat ./im_radl.json
#            sed -i 1,1d ./im_radl.json
#            INFID=$(jq -r '[ .infid ] | .[]' ./im_radl.json)
#            echo "INFID=${INFID}"
#            if [ ${RETURN_CODE} -eq 0 ] && ! [[ -z "${INFID}" && "x${INFID}x" == "xnullx" ]]; then
#              im_client.py -a "${IM_AUTH_FILE}" destroy ${INFID}
#              echo "im_client.py destroy return code: $?"
#            elif ! [[ -z "${INFID}" && "x${INFID}x" == "xnullx" ]]; then
#              echo "Deployment failed. Logs:"
#              im_client.py -a "${IM_AUTH_FILE}" getcontmsg ${INFID}
#              echo 
#              im_client.py -a "${IM_AUTH_FILE}" destroy ${INFID}
#              echo "im_client.py destroy return code: $?"
#              exit ${RETURN_CODE}
#            else
#              exit ${RETURN_CODE}
#            fi
          - |
            #!/bin/bash
            printf "$(cat /im/tosca_create.yml)" "${OPENSTACK_URL}" "${TOSCA_IMAGE_ID}" "${OPENSTACK_URL}" "${TOSCA_IMAGE_ID}" > /im/tosca_create_with_image.yml
            echo "Printing TOSCA file"
            cat /im/tosca_create_with_image.yml
            echo 
            im_client.py -r "${IM_SERVER}" -a "${IM_AUTH_FILE}" create_wait_outputs /im/tosca_create_with_image.yml > ./im_tosca.json
            RETURN_CODE=$?
            echo "im_client.py create_wait_outputs return code: ${RETURN_CODE}"
            echo "Infrastructure Manager output:"
            cat ./im_tosca.json
            echo 
            awk '/\{.*\}/ { print $1 }' ./im_tosca.json > ./im_tosca_aux.json
            echo "Infrastructure Manager output (only json part):"
            cat ./im_tosca_aux.json
            echo 
            mv ./im_tosca_aux.json ./im_tosca.json
            INFID=$(jq -r '[ .infid ] | .[]' ./im_tosca.json)
            echo "INFID=${INFID}"
            if [ ${RETURN_CODE} -eq 0 ] && ! [[ -z "${INFID}" && "x${INFID}x" == "xnullx" ]]; then
              im_client.py -a "${IM_AUTH_FILE}" destroy ${INFID}
              echo "im_client.py destroy return code: $?"
            elif ! [[ -z "${INFID}" && "x${INFID}x" == "xnullx" ]]; then
              echo "Deployment failed. Logs:"
              im_client.py -a "${IM_AUTH_FILE}" getcontmsg ${INFID}
              echo 
              im_client.py -a "${IM_AUTH_FILE}" destroy ${INFID}
              echo "im_client.py destroy return code: $?"
              exit ${RETURN_CODE}
            else 
              exit ${RETURN_CODE}
            fi

environment:
  RADL_IMAGE_ID: "5336f60b-d4cc-4285-a573-1b706cbbe40b"
  TOSCA_IMAGE_ID: "97624935-200f-4670-9ea8-c65282adbe56"
  IM_SERVER: "https://appsgrycap.i3m.upv.es:31443/im/"
  OPENSTACK_ID_PORT: "5000"
  IM_AUTH_FILE: '/im/auth/auth.dat'
  JPL_DOCKERPUSH: "imclient"
  #JPL_IGNOREFAILURES: "defined"
  #JPL_DOCKERFORCEBUILD: "enabled"
  #JPL_WORKSPACEDEBUG: "true"
  #JPL_WORKSPACEDEBUGTIMEOUT: "45"
  #JPL_DEBUG: "true"

# Timeout after no activity in logs for this configuration (not the absolute duration)
#timeout: 1200
